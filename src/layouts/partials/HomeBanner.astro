---
import AnimatedAnchor from "@/components/AnimatedAnchor.astro";
import ImageMod from "@/components/ImageMod.astro";
import { markdownify } from "@/lib/utils/textConverter";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

const { title, note, description, buttons, list, image } = (
  (await getEntry(
    "homeBannerSection",
    "home-banner"
  )) as CollectionEntry<"homeBannerSection">
).data;
---

{
  (
    <section class="overflow-hidden pb-0 pt-16 relative">
      <div class="container">
        <div class="row justify-center">
          <div class="pt-6 text-center md:col-9 lg:col-9">
            {note && (
              <div
                data-aos="fade-up-sm"
                class="border-animation mx-auto mb-4 w-fit rounded-full p-px">
                <div class="border-animation-inner flex gap-2 rounded-full border border-white/15 px-3 py-1.5">
                  <ImageMod src="/images/icons/svg/award.svg" alt="note" />
                  <span
                    class="text-sm opacity-70 md:text-base"
                    set:html={markdownify(note)}
                  />
                </div>
              </div>
            )}
            {title && (
              <h1
                set:html={markdownify(title)}
                data-aos="fade-up-sm"
                class="has-gradient mb-4 text-h2 lg:text-h1"
              />
            )}
            {description && (
              <p
                set:html={markdownify(description)}
                data-aos="fade-up-sm"
                class="mb-8 text-xl/[inherit] text-light"
              />
            )}
            {buttons && (
              <ul class="flex flex-wrap justify-center gap-4">
                {buttons.map(({ label, link }, index) => (
                  <li data-aos="fade-up-sm" data-aos-delay={100 + index * 50}>
                    <AnimatedAnchor
                      className={`${index === 0 ? "btn-primary" : "btn-outline-transparent"}`}
                      link={link}
                      target={link.startsWith("http") ? "_blank" : "_self"}
                      rel="noopener"
                      label={label}
                      hideIcon={!(index === 0)}
                    />
                  </li>
                ))}
              </ul>
            )}
            {list && (
              <ul
                data-aos="fade-up-sm"
                data-aos-delay="200"
                class="mt-6 flex flex-wrap justify-center gap-4">
                {list.map((item, index) => (
                  <li class="flex items-center gap-4 text-sm opacity-70">
                    {!(index === 0) && (
                      <span class="h-1.5 w-1.5 rounded-full bg-white/70" />
                    )}
                    {markdownify(item)}
                  </li>
                ))}
              </ul>
            )}
          </div>
          {image && (
            <div
              class="col-12 pt-8 lg:pt-16"
              data-aos="fade-up-sm"
              data-aos-delay="400">
              <div class="max-h-[825px]">
                {image && <ImageMod src={image.src} alt={image.alt} />}
              </div>
            </div>
          )}
        </div>
      </div>
      <div
        aria-hidden="true"
        class="pointer-events-none absolute left-[15%] top-1/2 z-10 h-[358px] w-[516px] rotate-[-19deg] rounded-full from-secondary/40 from-40% via-secondary via-60% to-primary opacity-30 blur-[100px] bg-gradient-to-tr md:top-1/3"
      />
    </section>
  )
}
