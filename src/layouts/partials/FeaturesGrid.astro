---
import ImageMod from "@/components/ImageMod.astro";
import { markdownify } from "@/lib/utils/textConverter";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

const { content, largeHeading } = Astro.props;

let { title, description, list } = (
  (await getEntry(
    "featuresGridSection",
    "features-grid"
  )) as CollectionEntry<"featuresGridSection">
).data;

if (content) {
  ({ title, description } = content);
}
---

{
  (
    <section class="section">
      <div class="container">
        <div class="row">
          <div
            class="mx-auto text-center lg:col-9 xl:col-7"
            data-aos="fade-up-sm">
            {title && largeHeading ? (
              <h1 class="has-gradient mb-6" set:html={markdownify(title)} />
            ) : (
              <h2 class="has-gradient mb-6" set:html={markdownify(title)} />
            )}
            {description && (
              <p
                class="text-lg/[inherit] opacity-80"
                set:html={markdownify(description)}
              />
            )}
          </div>
          <div class="col-12 pt-20">
            <div class="row gx-4 gy-5">
              {list?.map((item, index) => (
                <div
                  class="lg:col-4"
                  data-aos="fade-up-sm"
                  data-aos-delay={index * 150}>
                  <div
                    class={`flex min-h-full justify-between overflow-hidden rounded-lg border border-border bg-dark ${index === 0 ? "flex-col-reverse p-8" : index === 1 ? "pt-8 px-8 flex-col" : index === 2 ? "flex-col pl-8 pt-8" : "flex-col p-8"}`}>
                    <div class={(index === 2 && "pe-8") || ""}>
                      {item.title && (
                        <h3
                          class="h6 tracking-none mb-4 font-semibold"
                          set:html={markdownify(item.title)}
                        />
                      )}
                      {item.description && (
                        <p
                          class="mb-auto opacity-70"
                          set:html={markdownify(item.description)}
                        />
                      )}
                    </div>

                    {index === 0 && item.images ? (
                      <div class="mb-20 lg:mb-36 flex items-center justify-center gap-10">
                        {item.images.map((item, i) => (
                          <ImageMod
                            class={`${i === 1 ? "w-24 md:w-36" : "w-16 md:w-28"}`}
                            src={item}
                            alt={`user image`}
                          />
                        ))}
                      </div>
                    ) : index === 1 && item.images ? (
                      <div class="relative lg:-mb-8 w-full max-w-[420px] mt-40 mx-auto">
                        {item.images.slice(0, 2).map((item, i) => (
                          <ImageMod
                            class={`absolute inset-x-0 mx-auto block ${i === 0 ? "bottom-[10%] z-0 w-[80%]" : index === 1 ? "bottom-[-5%] z-10 w-[90%]" : "w-full"}`}
                            src={item}
                            alt={`feature`}
                          />
                        ))}
                        <ImageMod
                          class={`relative z-30 w-full`}
                          src={item.images[2]}
                          alt={`user image`}
                        />
                      </div>
                    ) : (
                      index === 2 && (
                        <div class="relative w-full max-w-[420px] mt-10 mx-auto">
                          {item.tools_bg && (
                            <ImageMod
                              class={`relative z-0 w-full pl-4`}
                              src={item.tools_bg}
                              alt={`user image`}
                            />
                          )}
                          {item.tools &&
                            item.tools.map((item, i) => {
                              const classes = [
                                "left-0 top-7 w-[calc(1vw_+_35px)]",
                                "left-[33%] top-7 w-[calc(1vw_+_35px)]",
                                "right-[20%] top-3 opacity-70 w-[calc(1vw_+_40px)]",
                                "left-[22%] top-[40%] w-[calc(1vw_+_35px)]",
                                "left-[46%] top-[40%] w-[calc(1vw_+_35px)] opacity-50",
                                "left-[76%] top-[46%] w-[calc(1vw_+_35px)]",
                                "left-[22%] top-[78%] w-[calc(1vw_+_35px)]",
                                "left-[56%] top-[70%] w-[calc(1vw_+_35px)]",
                              ];

                              return (
                                <div
                                  class={`absolute z-10 ${classes[i] || ""}`}>
                                  <ImageMod
                                    class={`w-full h-full`}
                                    src={item}
                                    alt={`user image`}
                                  />
                                </div>
                              );
                            })}
                        </div>
                      )
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
